二叉树：理论上不可能同时将两列都按顺序进行组织

B-Tree(多路平衡查找树)
B-Tree的结构可以让系统高效的找到数据所在的磁盘快
定义一条记录为二元组[key,data],key为记录的主键值，对应表中的主键值，data为一行记录中除主键外的数据。key值互不相同。
所有的key值都是按顺序存储，并且每一个叶子节点到跟的距离相同。
一个节点的key从左到右非递减排列。

一个m阶的B-Tree有如下特性：
（1）每个节点最多有m个孩子
（2）除了根结点和叶子节点外，其他每个节点都有k-1个元素和k个孩子，其中[m/2]<=k<=m.
（3）所有叶子节点都在同一层，包含被索引的数据,包含k-1个元素，指针均为null
（4）每个非终端节点包含n个关键字信息。
（5）P(i-1)指向的子树的所有节点关键字均小于ki

内存中的关键字是一个有序表结构，可以利用二分查找提高效率，磁盘I/O是影响查找效率的决定因素。

B-Tree索引能够加快访问数据的速度，因为存储引擎不再需要进行全表扫描来获取需要数据，取而代之的是从索引的根结点开始进行搜索。
根节点的槽中存放了指向子节点的指针，存储引擎根据这些指针向下层查找。
通过比较节点页的值和要查找的值可以找到合适的指针进入下层子节点，这些指针实际上定义了子节点页中值的上限和下限。

B树中往返于每个节点之间，意味着在硬盘的页面之间多次访问
当想要遍历所有元素时（中序）会出现访问一个节点多次

B+Tree（B-树的扩充）
出现在分支节点中的元素会被当作他们在该分支节点位置的中序后继者（叶子节点中在此列出）
每一个叶子节点都会保存一个指向后一叶子节点的指针

属性：
所有的叶子节点包含全部关键字的信息，及指向含这些关键字记录的指针
所有的分支节点可以看成是索引，不提供实际记录的访问，只存储key

B树详解：https://blog.csdn.net/hao65103940/article/details/89032538
http://blog.codinglabs.org/articles/theory-of-mysql-index.html
